{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-10-28T12:00:00-03:00",
    "name": "Python Selenium Chrome",
    "author": "carloscaferro@icloud.com",
    "description": "Ambiente Python com Selenium e Chrome para automação web e scraping",
    "features": null,
    "docker_images": {
        "Python 3.11": "ghcr.io/carloz2er/pterodactyl:python-selenium-chrome"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z {{PY_PACKAGES}} ]]; then pip install -U --prefix .local {{PY_PACKAGES}}; fi; if [[ -f requirements.txt ]]; then pip install -U --prefix .local -r requirements.txt; fi; /usr/local/bin/python {{BOT_PY_FILE}}",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"iniciado\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!/bin/bash\n\napt update\napt install -y git curl wget\n\nmkdir -p /mnt/server\ncd /mnt/server\n\necho \"=========================================\"\necho \"Instalando Python Selenium Chrome\"\necho \"=========================================\"\n\nif [ ! -z \"${INSTALL_REPO}\" ]; then\n    echo \"Clonando repositório: ${INSTALL_REPO}\"\n    \n    BRANCH=\"${INSTALL_BRANCH}\"\n    if [ -z \"${BRANCH}\" ]; then\n        BRANCH=\"main\"\n    fi\n    \n    if git clone -b ${BRANCH} https://github.com/${INSTALL_REPO}.git /tmp/repo 2>/dev/null; then\n        echo \"Repositório clonado com sucesso!\"\n        cp -r /tmp/repo/* /mnt/server/ 2>/dev/null || cp -r /tmp/repo/. /mnt/server/\n        rm -rf /tmp/repo\n    else\n        echo \"Falha ao clonar. Criando arquivo de exemplo...\"\n        cat > app.py <<'ENDOFFILE'\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.common.by import By\nimport time\nimport os\n\nprint(\"Iniciando bot Selenium...\")\n\nchrome_opts = os.getenv('CHROME_OPTIONS', '--no-sandbox --disable-dev-shm-usage --headless')\n\nchrome_options = Options()\nfor opt in chrome_opts.split():\n    chrome_options.add_argument(opt)\n\ndriver = webdriver.Chrome(options=chrome_options)\n\ntry:\n    driver.get(\"https://example.com\")\n    print(f\"Título: {driver.title}\")\n    print(\"Teste concluído!\")\nfinally:\n    driver.quit()\n\nprint(\"Mantendo container ativo...\")\nwhile True:\n    time.sleep(60)\nENDOFFILE\n        echo \"Arquivo app.py criado!\"\n    fi\nelse\n    echo \"Nenhum repositório especificado. Criando exemplo...\"\n    cat > app.py <<'ENDOFFILE'\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.common.by import By\nimport time\nimport os\n\nprint(\"Iniciando bot Selenium...\")\n\nchrome_opts = os.getenv('CHROME_OPTIONS', '--no-sandbox --disable-dev-shm-usage --headless')\n\nchrome_options = Options()\nfor opt in chrome_opts.split():\n    chrome_options.add_argument(opt)\n\ndriver = webdriver.Chrome(options=chrome_options)\n\ntry:\n    driver.get(\"https://example.com\")\n    print(f\"Título: {driver.title}\")\n    print(\"Teste concluído!\")\nfinally:\n    driver.quit()\n\nprint(\"Mantendo container ativo...\")\nwhile True:\n    time.sleep(60)\nENDOFFILE\n    echo \"Arquivo app.py criado!\"\nfi\n\nif [ ! -f requirements.txt ]; then\n    cat > requirements.txt <<'ENDOFFILE'\nselenium>=4.15.0\nrequests>=2.31.0\nbeautifulsoup4>=4.12.0\nENDOFFILE\n    echo \"requirements.txt criado!\"\nfi\n\necho \"=========================================\"\necho \"Instalação concluída!\"\necho \"=========================================\"",
            "container": "python:3.11-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Arquivo Python Principal",
            "description": "O arquivo Python principal para executar (ex: app.py, bot.py)",
            "env_variable": "BOT_PY_FILE",
            "default_value": "app.py",
            "user_viewable": 1,
            "user_editable": 1,
            "rules": "required|string|max:128"
        },
        {
            "name": "Auto Atualizar",
            "description": "Atualizar automaticamente do Git ao iniciar? (0 = não, 1 = sim)",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": 1,
            "user_editable": 1,
            "rules": "required|boolean"
        },
        {
            "name": "Pacotes Python Extras",
            "description": "Pacotes adicionais do pip separados por espaço (ex: discord.py pandas)",
            "env_variable": "PY_PACKAGES",
            "default_value": "",
            "user_viewable": 1,
            "user_editable": 1,
            "rules": "nullable|string|max:500"
        },
        {
            "name": "Repositório para Instalar",
            "description": "Repositório do GitHub para clonar (formato: usuario/repositorio)",
            "env_variable": "INSTALL_REPO",
            "default_value": "",
            "user_viewable": 1,
            "user_editable": 1,
            "rules": "nullable|string|max:128"
        },
        {
            "name": "Branch do Repositório",
            "description": "Branch do repositório para clonar (padrão: main)",
            "env_variable": "INSTALL_BRANCH",
            "default_value": "main",
            "user_viewable": 1,
            "user_editable": 1,
            "rules": "nullable|string|max:32"
        },
        {
            "name": "Opções do Chrome",
            "description": "Argumentos do Chrome separados por espaço",
            "env_variable": "CHROME_OPTIONS",
            "default_value": "--no-sandbox --disable-dev-shm-usage --headless --disable-gpu",
            "user_viewable": 1,
            "user_editable": 1,
            "rules": "nullable|string|max:500"
        }
    ]
}
